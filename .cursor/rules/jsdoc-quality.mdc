---
alwaysApply: true
description: Enforce meaningful JSDoc comments and avoid redundant documentation
---

# JSDoc Quality Standards

**Eliminate useless JSDoc comments that just repeat the function/variable name.**

## ❌ **DON'T: Write redundant JSDoc**

```typescript
/**
 * Get settings
 */
get settings() { ... }

/**
 * Load settings
 */
async loadSettings() { ... }

/**
 * Save settings
 */
async saveSettings() { ... }

/**
 * Update profile
 */
async updateProfile(profile: CalendarProfile) { ... }
```

## ✅ **DO: Write meaningful documentation or none at all**

```typescript
// No JSDoc needed - method name is self-explanatory
get settings() { ... }

// No JSDoc needed - clear from name and parameters
async loadSettings() { ... }

// Add JSDoc only when it provides real value
/**
 * Migrates settings from older versions and validates structure.
 * Throws error if migration fails or settings are invalid.
 */
private migrateSettings(data: any): CustomCalendarSettings { ... }

/**
 * Updates profile and automatically saves to disk.
 * Creates new profile if ID doesn't exist, updates existing otherwise.
 *
 * @throws {Error} When max profile limit is reached for new profiles
 */
async updateProfile(profile: CalendarProfile): Promise<void> { ... }
```

## **When JSDoc adds value:**

- **Complex logic**: Explain non-obvious behavior or algorithms
- **Error conditions**: Document what exceptions are thrown and when
- **Side effects**: Mention automatic saves, notifications, state changes
- **Business rules**: Explain validation rules or constraints
- **API contracts**: Document expected input/output for public methods
- **Performance notes**: Mention caching, async behavior, or expensive operations

## **When to skip JSDoc:**

- **Self-explanatory names**: `getName()`, `setActive()`, `isValid()`
- **Simple getters/setters**: Basic property access
- **Obvious parameters**: `updateProfile(profile)`, `removeById(id)`
- **Standard patterns**: Basic CRUD operations, event handlers
- **Private utilities**: Internal helper methods with clear names

## **Focus on code clarity first:**

- Use descriptive method and variable names
- Keep functions small and focused
- Use TypeScript types for parameter documentation
- Let the code tell the story, use JSDoc for context

**Remember**: Good code needs less documentation. Write code so clear that JSDoc becomes unnecessary, then add JSDoc only where it genuinely helps.